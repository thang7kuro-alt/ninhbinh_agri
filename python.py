# --- Ch·ª©c nƒÉng 6: Khung Chat h·ªèi ƒë√°p v·ªõi Gemini ---
st.subheader("6. Chat v·ªõi Gemini üí¨")

# L∆∞u l·ªãch s·ª≠ h·ªôi tho·∫°i (Session state)
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []

api_key = st.secrets.get("GEMINI_API_KEY")

if not api_key:
    st.error("Kh√¥ng t√¨m th·∫•y Kh√≥a API 'GEMINI_API_KEY'. Vui l√≤ng c·∫•u h√¨nh trong Streamlit Secrets.")
else:
    client = genai.Client(api_key=api_key)
    model_name = "gemini-2.5-flash"

    # Hi·ªÉn th·ªã khung chat
    user_input = st.chat_input("Nh·∫≠p c√¢u h·ªèi ho·∫∑c y√™u c·∫ßu c·ªßa b·∫°n...")

    if user_input:
        # G·ª≠i tin nh·∫Øn ng∆∞·ªùi d√πng
        st.session_state.chat_history.append({"role": "user", "content": user_input})

        with st.chat_message("user"):
            st.markdown(user_input)

        # G·ªçi Gemini tr·∫£ l·ªùi
        with st.chat_message("assistant"):
            with st.spinner("Gemini ƒëang tr·∫£ l·ªùi..."):
                try:
                    response = client.models.generate_content(
                        model=model_name,
                        contents=user_input
                    )
                    ai_reply = response.text
                except Exception as e:
                    ai_reply = f"‚ö†Ô∏è L·ªói khi g·ªçi Gemini: {e}"

                st.markdown(ai_reply)
                st.session_state.chat_history.append({"role": "assistant", "content": ai_reply})

    # Hi·ªÉn th·ªã l·∫°i to√†n b·ªô h·ªôi tho·∫°i
    for msg in st.session_state.chat_history:
        with st.chat_message(msg["role"]):
            st.markdown(msg["content"])

